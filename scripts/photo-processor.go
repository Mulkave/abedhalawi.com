package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"gopkg.in/gographics/imagick.v3/imagick"
)

func processImage(inputPath, outputPath string) error {
	fmt.Println("Processing image", inputPath, "to", outputPath)
	imagick.Initialize()
	defer imagick.Terminate()

	mw := imagick.NewMagickWand()
	defer mw.Destroy()

	// Read the input image
	err := mw.ReadImage(inputPath)
	if err != nil {
		return err
	}

	// Get the original dimensions
	width := mw.GetImageWidth()
	height := mw.GetImageHeight()

	// Calculate the new dimensions
	var newWidth, newHeight uint
	if width > height {
		newWidth = 1000
		newHeight = uint(float64(height) * (1000.0 / float64(width)))
	} else {
		newHeight = 1000
		newWidth = uint(float64(width) * (1000.0 / float64(height)))
	}

	// Resize the image
	err = mw.ResizeImage(newWidth, newHeight, imagick.FILTER_LANCZOS)
	if err != nil {
		return err
	}

	// Strip EXIF data
	mw.StripImage()

	// Set the output format to webp
	// err = mw.SetImageFormat("webp")
	// if err != nil {
	// 	return err
	// }

	// Write the output image
	err = mw.WriteImage(outputPath)
	if err != nil {
		return err
	}

	// Set EXIF metadata using exiftool
	setExifMetadata(outputPath, "Abed Halawi")

	return nil
}

func setExifMetadata(filePath, artist string) {
	cmd := exec.Command("exiftool", fmt.Sprintf("-copyright=%s", artist), fmt.Sprintf("-artist=%s", artist), filePath)
	err := cmd.Run()
	if err != nil {
		log.Fatalf("Failed to set EXIF metadata for %s: %v", filePath, err)
	}

	// Remove the original file generated by exiftool (exiftool creates a backup file by default)
	originalFile := filePath + "_original"
	if _, err := os.Stat(originalFile); os.IsNotExist(err) {
		return
	}

	err = os.Remove(originalFile)
	if err != nil {
		log.Printf("Failed to remove original file %s: %v", originalFile, err)
	}
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: go run main.go <input_directory>")
		return
	}

	inputDir := os.Args[1]

	fmt.Println("Processing images in", inputDir)

	// Initialize ImageMagick
	imagick.Initialize()
	defer imagick.Terminate()

	err := filepath.Walk(inputDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// Process only jpg files
		if strings.ToLower(filepath.Ext(path)) == ".jpg" {
			// outputPath := strings.TrimSuffix(path, filepath.Ext(path)) + ".webp"
			outputPath := strings.TrimSuffix(path, filepath.Ext(path)) + ".jpg"
			fmt.Printf("Processing %s -> %s\n", path, outputPath)
			err := processImage(path, outputPath)
			if err != nil {
				log.Printf("Failed to process %s: %v\n", path, err)
			}
		}
		return nil
	})

	if err != nil {
		log.Fatalf("Error walking the path %s: %v\n", inputDir, err)
	}
}
